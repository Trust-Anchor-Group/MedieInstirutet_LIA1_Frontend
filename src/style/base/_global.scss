// src/style/base/_global.scss

// Ensure the html and body elements take up the full height of the viewport
html, body {
  height: 100%;
  margin: 0;
  padding: 0;
  width: 100%;
}

// Set up basic styles for the body
// Note: We're not setting font-family, line-height, etc. here as they're already in _typography.scss
body {
  background-color: var(--background-color);
  color: var(--font-color);
  display: flex;
  flex-direction: column;
  min-height: 100vh; // Ensures the body is at least the full height of the viewport
  width: 100%;
}

// Styles for the root div in React applications
#root {
  display: flex;
  flex-direction: column;
  min-height: 100vh; // This ensures the React app takes up at least the full viewport height
  width: 100%;
  text-align: start !important;
}

// Main content area styles
main {
  flex: 1 0 auto; // This allows the main content to grow and push the footer down
  width: 100%;
  max-width: $pageWidthDesk; // Uses the desktop page width variable
  margin: 0 auto;
  padding: 0 pxToRem(16); // Adds some horizontal padding
}

// Basic heading styles
// Note: We're not setting font-size for h1 as it's already in _typography.scss
h2, h3, h4, h5, h6 {
  font-weight: 600;
  line-height: 1.2;
  margin-bottom: pxToRem(8);
}

// Link styles
a {
  color: var(--secondary-color);
  text-decoration: none;
  &:hover {
    text-decoration: underline;
  }
}

// Paragraph styles
p {
  margin-bottom: pxToRem(16);
}

// Make embedded content responsive
img, video, iframe {
  max-width: 100%;
  height: auto;
}

// Utility class for screen reader only content (accessibility)
.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border-width: 0;
}

// Clearfix utility for clearing floats
.clearfix::after {
  content: "";
  display: table;
  clear: both;
}